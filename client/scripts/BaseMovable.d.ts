import { Connection, DomBoxWithoutDimensions, InstanceTypes, MovableElement } from "./types";
import SingleMovable from "./SingleMovable";
import GroupMovable from "./GroupMovable";
import Puzzly from "./Puzzly";
export default class BaseMovable {
    instanceType: InstanceTypes;
    element: MovableElement;
    Puzzly: Puzzly;
    lastPosition: {
        top: number;
        left: number;
    };
    active: boolean;
    puzzleId: string;
    connection: Connection | undefined;
    puzzleImage: HTMLImageElement;
    piecesContainer: HTMLDivElement | null;
    activePocket?: HTMLDivElement;
    boardWidth: number;
    boardHeight: number;
    diffX: number;
    diffY: number;
    zoomLevel: number;
    connectorTolerance: number;
    shadowOffset: number;
    isDragAndSelectActive: boolean;
    puzzly: any;
    solvedContainer: HTMLDivElement;
    solvedAreaElement: HTMLDivElement;
    playBoundary: HTMLDivElement | null;
    solvedCanvas: HTMLDivElement;
    pocketsContainer: HTMLDivElement;
    pockets: NodeListOf<HTMLDivElement>;
    connectorDistanceFromCorner: number;
    connectorSize: number;
    groupOperations: any;
    solvedGroupId: number;
    dragAndSelectActive: boolean;
    constructor(puzzly: Puzzly);
    keepOnTop(element: MovableElement): void;
    getMovableInstanceFromElement(element: MovableElement): SingleMovable | GroupMovable;
    onChangeScale(event: MouseEvent): void;
    isPuzzlePiece(target: HTMLDivElement): boolean | undefined;
    isSinglePiece(element: HTMLDivElement): boolean;
    isPlayBoundary(element: HTMLElement): boolean;
    static isGroupedPiece(element: HTMLDivElement): boolean;
    isPocketPiece(element: HTMLDivElement): boolean;
    isDragAndSelectPiece(element: HTMLDivElement): boolean;
    getPocketByCollision(box: DomBoxWithoutDimensions): HTMLDivElement | undefined;
    hasCollision(targetElement: HTMLDivElement, source?: DomBoxWithoutDimensions): boolean;
    isInsidePlayArea(): boolean;
    isOverPockets(event: MouseEvent): boolean;
    addToStage(element?: MovableElement): void;
    isPuzzleComplete(): boolean;
    onPickup(event: MouseEvent): void;
    onDrop(): void;
    onMouseMove(event: MouseEvent): void;
    onMouseUp(event: MouseEvent): void;
    handleConnection(): void;
    isConnectionBetweenSingleAndGroup(sourceInstanceType: InstanceTypes, targetInstanceType: InstanceTypes): boolean;
    isConnectionBetweenTwoGroups(sourceInstanceType: InstanceTypes, targetInstanceType: InstanceTypes): boolean;
    getSolvingAreaBoundingBox(): {
        top: number;
        left: number;
        right: number;
        bottom: number;
        width: number;
        height: number;
    };
    getPosition(): {
        top: number;
        left: number;
    };
    resetPosition(): void;
    clean(): void;
}
