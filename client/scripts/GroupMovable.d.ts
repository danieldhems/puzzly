import GroupOperations from "./GroupOperations";
import BaseMovable from "./BaseMovable";
import SingleMovable from "./SingleMovable";
import CanvasOperations from "./CanvasOperations";
import PersistenceOperations from "./persistence";
import { DomBox, InstanceTypes, JigsawPieceData, MovableElement, GroupMovableSaveState } from "./types";
import Puzzly from "./Puzzly";
export default class GroupMovable extends BaseMovable {
    instanceType: InstanceTypes;
    _id?: string;
    canvas: HTMLCanvasElement;
    piecesInGroup: SingleMovable[];
    elementsInGroup: MovableElement[];
    Puzzly: Puzzly;
    GroupOperations: GroupOperations;
    CanvasOperations: CanvasOperations;
    PersistenceOperations: PersistenceOperations;
    position: {
        top: number;
        left: number;
    };
    zIndex: number;
    width: number;
    height: number;
    zoomLevel: number;
    isSolved: boolean;
    constructor({ Puzzly, pieces, _id, position, zIndex, isSolved, }: {
        Puzzly: Puzzly;
        pieces: SingleMovable[];
        _id?: string;
        position?: {
            top: number;
            left: number;
        };
        zIndex?: number;
        isSolved?: boolean;
    });
    isElementOwned(element: MovableElement): boolean;
    initiateGroup(): void;
    restoreFromPersistence(): void;
    joinTo(movableInstance: SingleMovable | GroupMovable): Promise<void>;
    alignWith(movableInstance: SingleMovable | GroupMovable): void;
    addPieces(pieceInstances: SingleMovable[]): Promise<void>;
    redrawCanvas(): void;
    removeCanvas(): void;
    attachElements(): void;
    render(): void;
    isPuzzlePieceInThisGroup(element: MovableElement): boolean;
    onMouseDown(event: MouseEvent): void;
    getConnection(): import("./types").Connection | undefined;
    onMouseUp(event: MouseEvent): void;
    onMoveFinished(): void;
    isOutOfBounds(): boolean;
    solve(): void;
    getPieceIdsFromServerResponse(pieceData: JigsawPieceData[]): string[];
    arePieceIdsInThisGroup(pieceIds: string[]): boolean;
    isServerResponseForThisGroup(data: {
        _id: string;
        pieces: JigsawPieceData[];
    }): boolean | undefined;
    setGroupIdAcrossInstance(id: string): void;
    onSaveResponse(event: CustomEvent): void;
    getAllPieceData(): import("./types").SingleMovableSaveState[];
    getDataForSave(): GroupMovableSaveState;
    setLastPosition(position?: Pick<DomBox, "top" | "left">): void;
    save(force?: boolean): Promise<void>;
    onSaveSuccess(event: CustomEvent): void;
    delete(): void;
    detachElements(): void;
    destroy(): void;
    clean(): void;
}
