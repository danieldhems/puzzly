import BaseMovable from "./BaseMovable";
import { PocketMovable } from "./PocketMovable";
import Puzzly from "./Puzzly";
import SingleMovable from "./SingleMovable";
import { DomBox, MovableElement, Orientation } from "./types";
export default class Pockets {
    Puzzly: Puzzly;
    playBoundary: Puzzly["playBoundary"];
    ui: HTMLDivElement | null;
    lastPosition: {
        top: number;
        left: number;
    };
    activePocket: Element | null;
    movingElement: HTMLDivElement | null;
    isMouseDown: boolean;
    isMovingSinglePiece: boolean;
    activePocketHasMultiplePieces: boolean;
    activePiecesContainer: HTMLDivElement;
    pocketsHandle: HTMLDivElement | null;
    shadowOffset: number;
    largestPieceSpan: number;
    connectorSize: number;
    borderColor: string;
    animationDuration: number;
    isMainCanvasMoving: boolean;
    isDragActive: boolean;
    zoomLevel: number;
    pockets: Element[];
    diffX: number;
    diffY: number;
    isCollapsed: boolean;
    currentOrientation: Orientation | null;
    BaseMovable: BaseMovable;
    constructor(config: Puzzly);
    setSizeAndPosition(): void;
    getOrientation(): Orientation | null;
    hasOrientationChanged(): boolean;
    onResize(): void;
    setScale(event: CustomEvent): void;
    getPocketIdFromPiece(element: HTMLElement): number | undefined;
    getIdForPocket(pocket: HTMLDivElement): string;
    resetPieceScale(element: MovableElement): void;
    getPocketByCollision(box: DomBox): Element | undefined;
    isFromPocket(element: HTMLElement): boolean;
    isFromCanvas(element: MovableElement): boolean;
    getPocketIdFromElement(element: MovableElement): string | false;
    getEventBoundingBox(e: MouseEvent): {
        top: number;
        right: number;
        bottom: number;
        left: number;
    };
    getPocketDropEventMessage(): CustomEvent<unknown>;
    onMouseDown(e: MouseEvent): void;
    onMouseMove(e: MouseEvent): void;
    getPiecesInActivePocket(): ChildNode[];
    getMovingElementForActivePocket(e: MouseEvent): HTMLDivElement;
    getPositionForMovingElement(): {
        top: number;
        left: number;
    };
    enablePointerEvents(): void;
    disablePointerEvents(): void;
    onMouseUp(): void;
    eventTargetIsPocket(e: MouseEvent): boolean;
    eventTargetIsCanvas(e: MouseEvent): boolean;
    resetActivePocket(): void;
    reset(): void;
    setElementPositionInPocket(element: MovableElement, pocket: HTMLDivElement): void;
    resetElementPositionsInPockets(): void;
    addSingleToPocket(pocket: HTMLDivElement | number, pieceInstance: SingleMovable): void;
    addManyToPocket(pocket: HTMLDivElement | number, movableOrArrayOfElements: PocketMovable | NodeListOf<ChildNode>): void;
}
